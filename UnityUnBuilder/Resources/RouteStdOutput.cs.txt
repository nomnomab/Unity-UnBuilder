using System;
using System.Collections;
using System.IO;
using UnityEngine;
using UnityEditor;

namespace Nomnom {
    static class RouteStdOutput {
        private static ILogger logger = Debug.unityLogger;
        public static UtilLogger Logger;
        
        [InitializeOnLoadMethod]
        static void OnLoad() {
            Application.SetStackTraceLogType(LogType.Log, StackTraceLogType.None);
            
            logger.Log("Overriding Unity logger...");
            Logger = new UtilLogger();
        }
    }

    class UtilLogger : ILogHandler {
        private ILogHandler _unityLogHandler = Debug.unityLogger.logHandler;
        
        public UtilLogger() {
            Debug.unityLogger.logHandler = this;
        }
        
        public void LogFormat(LogType logType, UnityEngine.Object context, string format, params object[] args) {
            _unityLogHandler.LogFormat(logType, context, format, args);
            
            // var errorWriter = Console.Error;
            var color = "grey";
            if (logType == LogType.Warning) {
                color = "yellow";
            } else if (logType == LogType.Error || logType == LogType.Exception || logType == LogType.Assert) {
                color = "red";
            }
            
            // todo: trim until UnityEngine.DebugLogHandler:Internal_Log(LogType, LogOption, String, Object)
            Console.WriteLine(string.Format("from_patcher::[{0}]{1}[/]: {2}", color, logType, string.Format(format, args)));
        }

        public void LogException(Exception exception, UnityEngine.Object context) {
            _unityLogHandler.LogException(exception, context);
            
            var errorWriter = Console.Error;
            errorWriter.WriteLine(string.Format("from_patcher::[red]Exception[/]: {0}", exception));
        }
    }
}
