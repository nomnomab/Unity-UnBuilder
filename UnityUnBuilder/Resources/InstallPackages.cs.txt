using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using UnityEditor;
using UnityEditor.PackageManager.Requests;
using UnityEditor.PackageManager;
using UnityEngine;

namespace Nomnom {
    public static class InstallPackages {
        // this gets filled via the tool
        private static int _toAddCount = #_PACKAGE_INSTALL_COUNT;
        private static Stack<string> _toAdd = new Stack<string>(new string[] {
#_PACKAGES_TO_INSTALL_
        });
        
        private static int _toRemoveCount = #_PACKAGE_REMOVE_COUNT;
        private static Stack<string> _toRemove = new Stack<string>(new string[] {
#_PACKAGES_TO_REMOVE_
        });
        
        static void UpdateSettings() {
            var playerSettings = Resources.FindObjectsOfTypeAll<PlayerSettings>().First();
            var playerSettingsObject = new SerializedObject(playerSettings);
            playerSettingsObject.Update();
            
            if (_toAdd.Any(x => x.StartsWith("com.unity.inputsystem"))) {
                Debug.Log("Has new input system");
                
                var buildTargetGroup = EditorUserBuildSettings.selectedBuildTargetGroup;
                var scriptingDefines = PlayerSettings.GetScriptingDefineSymbolsForGroup(buildTargetGroup);
                if (!scriptingDefines.Contains("NEW_INPUT_SYSTEM_ENABLED")) {
                    scriptingDefines.Replace(";NEW_INPUT_SYSTEM_ENABLED", "");
                    if (true) {
                        scriptingDefines += ";NEW_INPUT_SYSTEM_ENABLED";
                    }
                    
                    Debug.Log(scriptingDefines);
                    PlayerSettings.SetScriptingDefineSymbolsForGroup(buildTargetGroup, scriptingDefines);
                    AssetDatabase.SaveAssets();
                    AssetDatabase.Refresh();
                }
            }
        }
        
        public static void OnLoad() {
            UpdateSettings();
            
            Debug.Log(_toAddCount + " packages to install!");
            Debug.Log(_toRemoveCount + " packages to remove!");
            
            Execute();
            
            Debug.Log($"Done installing packages!");
            EditorUtility.ClearProgressBar();
            EditorApplication.Exit(0);
        }
        
// #if UNITY_2021_3_OR_NEWER
//         static AddAndRemoveRequest Request;

//         // >= 2021.3
//         private static void Execute() {
//             Request = Client.AddAndRemove(
//                 _toAdd.ToArray(),
//                 _toRemove.ToArray()
//             );
            
//             while (!Request.IsCompleted) { }
            
//             Debug.Log("Status: " + Request.Status);
                
//             if (Request.Status == StatusCode.Success) {
//                 // installed package
                
//                 var result = Request.Result;
//                 foreach (var package in result) {
//                     Debug.Log($"name: {package.name}");
//                 }
//             } else if (Request.Status >= StatusCode.Failure) {
//                 throw new Exception("Failed to install packages!\n" + Request.Error.errorCode + "\n" + Request.Error.message);
//             }
            
//             Request = null;
//         }
        
// #else
        static AddRequest    AddRequest;
        static RemoveRequest RemoveRequest;
        
        // < 2021.3
        private static void Execute() {
            while (_toAdd.Count > 0) {
                var name = _toAdd.Pop();
                
                Debug.Log("Installing package: " + name);
                AddRequest = Client.Add(name);
                
                while (!AddRequest.IsCompleted) { }
                
                Debug.Log("Status: " + AddRequest.Status);
                
                if (AddRequest.Status == StatusCode.Success) {
                    // installed package
                } else if (AddRequest.Status >= StatusCode.Failure) {
                    Debug.LogWarning(AddRequest.Error.message);
                }
                
                AddRequest = null;
            }
            
            while (_toRemove.Count > 0) {
                var name = _toRemove.Pop();
                
                Debug.Log("Removing package: " + name);
                RemoveRequest = Client.Remove(name);
                
                while (!RemoveRequest.IsCompleted) { }
                
                Debug.Log("Status: " + RemoveRequest.Status);
                
                if (RemoveRequest.Status == StatusCode.Success) {
                    // removed package
                    Debug.Log("Added: " + name);
                } else if (RemoveRequest.Status >= StatusCode.Failure) {
                    Debug.LogWarning(RemoveRequest.Error.message);
                }
                
                RemoveRequest = null;
            }
        }
// #endif
    }
}
